/*

Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.

Note:

    The given integer is guaranteed to fit within the range of a 32-bit signed integer.
    You could assume no leading zero bit in the integerâ€™s binary representation.

Example 1:

Input: 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.

Example 2:

Input: 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.


*/


public class Solution {
    public int findComplement(int num) {
        
        String numConvert 	= Integer.toBinaryString( num );
        char[] charArrOfNumConv = numConvert.toCharArray();

        for ( int i =0; i < charArrOfNumConv.length; i ++ ) {

            if (charArrOfNumConv[i] == '1') charArrOfNumConv[i] = '0';
            else charArrOfNumConv[i] = '1';

        }

        String stringConvert 	= new String( charArrOfNumConv );		//imp!! char array is directly converted to string
        int binToInt		= Integer.parseInt( stringConvert, 2 );		//imp!! 2 here represents (radix) binary base to decimal

        return binToInt;
    }
}

//	package	- java.lang.Integer
// 	class	- Integer
//	method  - Integer.toBinaryString(intParameter)
// returns String type


//	package	- java.lang.String
//	class	- String
//	method	- stringParameter.toCharArray()	
// returns char[] type

//	package	- java.lang.Integer
//	class	- Integer
//	method	- Integer.parseInt(stringParameter, int radix)	
// returns int type

