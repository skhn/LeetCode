/*
The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers x and y, calculate the Hamming distance.

Note:
0 = x, y < 2^31.

Example:

Input: x = 1, y = 4

Output: 2

Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ^   ^

The above arrows point to positions where the corresponding bits are different.
*/


public class Solution {
    public int hammingDistance( int x, int y ) {
        
        int count  = 0;
        int xorInt = ( x ^ y );
        
        String stringBits    = Integer.toBinaryString( xorInt );
        char[] charBitsArray = stringBits.toCharArray();
        
        for ( int i =0; i < charBitsArray.length; i++ ) {
            if ( charBitsArray[i] == '1' ) {
                count ++;
            }
        } return count;
    }
}


//	package	- java.lang.Integer
// 	class	- Integer
//	method  - Integer.toBinaryString(intParameter)
// returns String type


//	package	- java.lang.String
//	class	- String
//	method	- stringParameter.toCharArray()	
// returns char[] type

